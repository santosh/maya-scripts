/* Apply noise to the supplied geometry object using the supplied max displacement. */
global proc arPolyNoise(string $geoObject, float $maxDisplacement)
{
    // if $geoObject is a transform, get its first shape node
    if (`nodeType $geoObject` == "transform")
    {
        string $shapes[] = `listRelatives -shapes $geoObject`;
        $geoObject = $shapes[0];
    }
    // ensure $geoObject is a mesh
    if (`nodeType $geoObject` != "mesh")
    {
        error "Must supply a polygon mesh or a transform with a polygon mesh.";
    }
    else
    {
        // retrieve the vertex count of the mesh
        int $vertCount[] = `polyEvaluate -vertex $geoObject`;
        // loop through each vertex in the mesh and add noise
        vector $unitVector = << 1.0, 1.0, 1.0 >>;
        for ($i=0; $i<$vertCount[0]; $i++)
        {
            vector $displacement = $unitVector * `rand 0 1.0` * $maxDisplacement;
            float $pos[] = `xform -q -ws -t pSphere1.vtx[$i]`;
            float $tx = $pos[0] + $displacement.x;
            float $ty = $pos[1] + $displacement.y;
            float $tz = $pos[2] + $displacement.z;
            xform -ws -t $tx $ty $tz ($geoObject+".vtx["+$i+"]");
        }
    }
}

float $startTime = `timerX`;
string $sphere[] = `polySphere -r 1 -subdivisionsX 200 -subdivisionsY 200`;
arPolyNoise($sphere[0], 0.02);
float $totalTime = `timerX -startTime $startTime`;
print("Execution time: " + $totalTime + " seconds.\n");